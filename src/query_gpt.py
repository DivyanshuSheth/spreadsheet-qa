from openai import OpenAI
import argparse
import base64
from PIL import Image
import io
import os

client = OpenAI(
    # This is the default and can be omitted
    api_key=os.environ.get("OPENAI_API_KEY"),
)

def load_image_as_base64(image_path):
    """
    Loads an image from the specified path and converts it to a base64 encoded string.
    
    :param image_path: Path to the image file.
    :return: Base64 encoded string of the image.
    """
    try:
        with Image.open(image_path) as img:
            buffered = io.BytesIO()
            img.save(buffered, format='PNG')
            img_b64_str = base64.b64encode(buffered.getvalue()).decode('utf-8')
            return img_b64_str, 'image/png'
    except Exception as e:
        print(f"Error loading and encoding image: {e}")
        return None, None

def get_answer_from_gpt4o_with_image_b64(img_b64_str, img_type, question):
    """
    Gets an answer from GPT-4o given a base64 encoded image and a question.
    
    :param img_b64_str: The base64 encoded string of the image.
    :param img_type: The MIME type of the image.
    :param question: The question to ask.
    :return: Answer generated by GPT-4o.
    """
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": question},
                    {
                        "type": "image_url",
                        "image_url": {"url": f"data:{img_type};base64,{img_b64_str}"},
                    },
                ],
            }
        ],
    )
    return response.choices[0].message.content

def main():
    """
    Main function to perform question answering over an image using command-line arguments.
    """
    parser = argparse.ArgumentParser(description='Question answering over images using GPT-4o.')
    parser.add_argument('--image_path', type=str, help='Path to the image file.')
    parser.add_argument('--question', type=str, help='The question to be answered.')

    args = parser.parse_args()

    # Load and encode the image as base64
    img_b64_str, img_type = load_image_as_base64(args.image_path)
    
    if not img_b64_str:
        print("Failed to load and encode the image.")
        return
    
    # Get answer from GPT-4o
    answer = get_answer_from_gpt4o_with_image_b64(img_b64_str, img_type, args.question)
    
    print(f"Question: {args.question}")
    print(f"Answer: {answer}")

# Entry point for the script
if __name__ == "__main__":
    main()